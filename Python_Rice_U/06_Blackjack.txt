"""
Cadmus 2015-04-07
Mini-project #6 - Blackjack
"""
import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
cards_dealt = []
card_dupe = True
player_turn_over = False

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, x, y, hidecard):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [x + CARD_CENTER[0], y + CARD_CENTER[1]], CARD_SIZE)
        if hidecard == True:
            card_loc = (CARD_BACK_CENTER[0], CARD_BACK_CENTER[1])
            canvas.draw_image(card_back, card_loc, CARD_BACK_SIZE, [x + CARD_BACK_CENTER[0], y + CARD_BACK_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.hand = []

    def __str__(self):
        hand_readable = "Hand contains: "
        for i in range(len(self.hand)):
            hand_readable += str(self.hand[i])
            hand_readable += " "
        return hand_readable


    def add_card(self, card):
        # add a card object to a hand
        self.hand.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        self.hand_val = 0
        ace_counter, ace_add = 0, 1
        
        for i in range(len(self.hand)):
            card_rank = str(self.hand[i])
            self.hand_val += VALUES[card_rank[-1]]
            if card_rank[-1] == "A":
                ace_counter += 1
            else:
                pass
        while ace_add <= ace_counter:
            if self.hand_val + 10 <= 21:
                self.hand_val += 10
            else:
                pass
            ace_add += 1
            
        return self.hand_val
   
    def draw(self, canvas, vert):
        for card in self.hand:
            xcard = Card(card[0], card[1])
            xcard.draw(canvas, 50+80*self.hand.index(card), vert, False)

# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for i in SUITS:
            for j in RANKS:
                self.deck.append(i + j)

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)

    def deal_card(self):
        return Card(random.choice(SUITS), random.choice(RANKS))
    
    def __str__(self):
        deck_readable = "Deck Contains: "
        for k in range(len(self.deck)):
            deck_readable += str(self.deck[k])
            deck_readable += " "
        return deck_readable

#define event handlers for buttons
def deal():
    global outcome, curr_msg, in_play, fresh_deck, hand_player, hand_dealer, cards_dealt, card_dupe, score

    # reset player/dealer hands, list of dealt cards, card duplication indicator for new game
    # update score to decrease by one if game was already in play when re-dealing
    if in_play == True:
        score -= 1
    else:
        pass
    
    hand_player, hand_dealer, cards_dealt, card_dupe, outcome = Hand(), Hand(), [], True, "Hit or Stand?"
    
    # fresh deck, deal cards - 2 to player, 2 to dealer
    fresh_deck = Deck()
    fresh_deck.shuffle()
    
    for x in range(2):
        card_pending_player = str(fresh_deck.deal_card())
        cards_dealt.append(card_pending_player)
        
        while card_dupe == True:
            card_pending_dealer = str(fresh_deck.deal_card())
            if card_pending_dealer in cards_dealt:
                pass
            else:
                card_dupe = False
        
        cards_dealt.append(card_pending_dealer)
        hand_player.add_card(card_pending_player)
        hand_dealer.add_card(card_pending_dealer)
        card_dupe = True
        
    #print fresh_deck
    #print "Player", hand_player, "Value: ", hand_player.get_value()
    #print "Dealer", hand_dealer, "Value: ", hand_dealer.get_value()
    
    # REMOVE FOLLOWING 2 LINES AFTER DEBUGGING
    #print "total cards dealt: " , cards_dealt, "\n"

    ####
    in_play = True

def hit():
    global in_play, hand_player, hand_dealer, score, outcome
    
    # if the hand is in play, hit the player
    if in_play == True:
        card_dupe = True
        while card_dupe == True:
            card_pending_hit = str(fresh_deck.deal_card())
            if card_pending_hit in cards_dealt:
                pass
            else:
                card_dupe = False
        
        cards_dealt.append(card_pending_hit)
        hand_player.add_card(card_pending_hit)
    else:
        outcome = "Hit Deal for new cards"
    
    if hand_player.get_value() > 21 and in_play == True:
        outcome = "You're busted!  New Deal?" #, hand_player.get_value(), "\n"
        in_play = False
        score -= 1

        
def stand():
    global card_dupe, hand_dealer, in_play, outcome, score, player_turn_over
    player_turn_over = True
    if in_play == False:
        outcome = "New Deal?"
    else:
        # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
        #print "Dealer gets his turn now :)"
        while hand_dealer.get_value() < 17:
            card_dupe = True
            while card_dupe == True:
                card_pending_stand = str(fresh_deck.deal_card())
                if card_pending_stand in cards_dealt:
                    pass
                else:
                    card_dupe = False
                    cards_dealt.append(card_pending_stand)
                    hand_dealer.add_card(card_pending_stand)
        
        # Assess dealer hand once >= 17 value
        if hand_dealer.get_value() > 21:
            outcome = "Dealer busted! New Deal?"#, hand_dealer, "Hand value: ", hand_dealer.get_value()
            score += 1
        else:
            if hand_dealer.get_value() > hand_player.get_value():
                outcome = "YOU LOSE!!! New Deal?"
                score -= 1
            elif hand_dealer.get_value() == hand_player.get_value():
                outcome = "Dealer wins ties, New Deal?"
                score -= 1
            else:
                outcome = " YOU WIN!!! New Deal?"
                score += 1

        # assign a message to outcome, update in_play and score
        in_play = False

# draw handler
def draw(canvas):
    global in_play
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Score: " + str(score), (230, 100), 30, "Green", "monospace")
    canvas.draw_text("BLACKJACK", (200,70), 40, "White", "monospace")
    canvas.draw_text("DEALER HAND", (55, 180), 28, "Green", "monospace")
    canvas.draw_text("PLAYER HAND", (55, 380), 26, "White", "monospace")
    canvas.draw_text("Your value: " + str(hand_player.get_value()), (55, 340), 15, "White", "monospace")
    canvas.draw_text(outcome, (220, 330), 28, "Yellow")
    hand_dealer.draw(canvas, 200)
    hand_player.draw(canvas, 400)
    card = Card("S", "A")
    if in_play == True:
        card.draw(canvas, 50, 200, hidecard = True)
    if player_turn_over == True:
        # only draw dealer hand value at this point:
        canvas.draw_text("Dealer's value: " + str(hand_dealer.get_value()), (55, 140), 15, "White", "monospace")


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Black")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()